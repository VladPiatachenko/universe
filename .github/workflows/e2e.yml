name: E2E Tests

on:
  push:
    branches:
      - units_piatachenko
  pull_request:
    branches:
      - sumdu.edu.ua
      - units_piatachenko

jobs:
  e2e-tests:
    runs-on: windows-latest  # Use Windows environment

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java 19 (to match the target release)
      - name: Set up Java 19
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # Eclipse Temurin distribution
          java-version: '19'

      # Step 3: Set up Maven
      - name: Set up Maven
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '19'
          cache: 'maven'

      # Step 4: Install dependencies without running tests
      - name: Install dependencies without tests
        run: mvn install -DskipTests

      # Step 5: Set up SQLite on Windows (Remove schema loading)
      - name: Set up SQLite
        run: |
          $env:Path += ";${{ github.workspace }}"
          # Ensure that universe.db is correctly placed in the workspace
          # You can also check if the database exists here if needed
          if (Test-Path "$env:WORKSPACE\universe.db") {
              Write-Host "Database exists, ready to use."
          } else {
              Write-Host "Database does not exist!"
              exit 1
          }

      # Step 6: Start the Java application with application.properties
      - name: Start the Java application
        run: |
          java -jar target/your-application.jar --spring.config.location=${{ github.workspace }}\application.properties &

      # Step 7: Wait for the application to start (you may adjust the time)
      - name: Wait for the application to start
        run: Start-Sleep -Seconds 30

      # Step 8: Run Cucumber + Selenium tests
      - name: Run Cucumber + Selenium tests
        run: |
          mvn test -Dselenium.chrome.options="--headless,--no-sandbox,--disable-dev-shm-usage"

      # Step 9: Set up Python for Robot Framework tests
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Robot Framework and dependencies
        run: |
          pip install robotframework
          pip install robotframework-seleniumlibrary
          pip install -r requirements.txt

      # Step 10: Run Robot Framework E2E tests
      - name: Run Robot Framework E2E tests
        run: |
          robot --outputdir results e2e_tests/

      # Step 11: Archive Cucumber and Robot Framework test results
      - name: Archive test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            target/surefire-reports   # Cucumber test results (JUnit reports are often stored here)
            results/                 # Robot Framework results
